<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>greatboy的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://greatboy.github.io/"/>
  <updated>2016-09-09T09:44:18.000Z</updated>
  <id>http://greatboy.github.io/</id>
  
  <author>
    <name>greatboy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue 构建和组件开发</title>
    <link href="http://greatboy.github.io/2016/04/18/vue-build/"/>
    <id>http://greatboy.github.io/2016/04/18/vue-build/</id>
    <published>2016-04-18T04:44:19.000Z</published>
    <updated>2016-09-09T09:44:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>要想用vue开发项目,会简单的语法还不够满足项目的需求,首先我们考虑的就是如果用vue快速投入的项目中,关注亮点<br>1、如何更好的支持组件开发<br>2、如何构建打包程序,例如我们用es6开发<br><a id="more"></a></p>
</blockquote>
<h4 id="一、组件开发"><a href="#一、组件开发" class="headerlink" title="一、组件开发"></a>一、组件开发</h4><p>看过了组件的看法文档,先写两个例子</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span>&gt;</span></div><div class="line">    Hello &#123;&#123;msg&#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-component1</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"component-1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个自定义的组件dddddddddddddddddddd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">    template: <span class="string">'#component-1'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 全局注册组件，tag 为 my-component</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, MyComponent);</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> MyComponent1 = Vue.extend(&#123;</div><div class="line">    template: <span class="string">'&lt;div&gt;我是一个自定义的组件1,我的模板文件在html里面哦&lt;/div&gt;'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 全局注册组件，tag 为 my-component</span></div><div class="line">Vue.component(<span class="string">'my-component1'</span>, MyComponent1);</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#test-container'</span>,</div><div class="line">    data: &#123;</div><div class="line">        msg: <span class="string">'Great Boy'</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>目前看来组件实现比较方便呀, 那怎么传值呢????</p>
<p>看看props 传值</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件props 传值<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"props-container"</span>&gt;</span></div><div class="line">    Hello &#123;&#123;msg&#125;&#125;</div><div class="line">     <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">msg</span>=<span class="string">'[&#123;"name":"测试一"&#125;,&#123;"name":"测试二"&#125;]'</span> <span class="attr">title</span>=<span class="string">"title值"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"component-2"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个自定义的组件,传过来的值是&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">'item in msg|jsonParse'</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.filter(<span class="string">'jsonParse'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(value);</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> MyComponent2 = Vue.extend(&#123;</div><div class="line">    props:[<span class="string">'msg'</span>,<span class="string">'title'</span>],</div><div class="line">    template: <span class="string">'#component-2'</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// 全局注册组件，tag 为 my-component</span></div><div class="line">Vue.component(<span class="string">'my-component2'</span>, MyComponent2);</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    el:<span class="string">'#props-container'</span>,</div><div class="line">    data:&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><a href="/demo/vue-demo/vue_component.html">查看demo</a><br>传值也比较简单, 我觉得vue成功的的一部分原因就在于它的灵活性以及简单优美.</p>
<h4 id="二、组件打包合并"><a href="#二、组件打包合并" class="headerlink" title="二、组件打包合并"></a>二、组件打包合并</h4><p>当今的前端发展非常迅速,有非常好用的打包合并工具,例如gulp grunt webpack browserify fis等等构建工具,<br>由于在百度工作了一段时间,所以对fis还是比较熟悉,但是webpack目前还没用过,因为fis我已经觉得非常好用了,它就是有点重.<br>说说他们的区别吧<br>1) gulp和grunt更倾向于小工具,做一些打包合并压缩,以及你可以去写一些自己的插件,来优化构建.<br>2) browserify webpack 是模块化发展的结果 , 一开始主要还是在线编译的seajs 和 requirejs, browserify webpack 可以实现预编译, 在后台编译好,省去了在线编译加载多个文件的方式.<br>3) <a href="">fis</a> 主要是比较完善的构建工具,百度前端团队开发,支持打包合并压缩以及模块化的编译等等.</p>
<blockquote>
<p>新： 使用脚手架工具 <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="external">vue-cli</a> 可以快速地构建项目：单文件 Vue 组件，热加载，保存时检查代码，单元测试等。<br>官方推荐,对于大型项目，为了更好地管理代码使用模块构建系统非常必要。推荐代码使用 CommonJS 或 ES6 模块，然后使用 Webpack 或 Browserify 打包。<br>Webpack 和 Browserify 不只是模块打包器。两者都提供了源码转换 API，通过它可以用其它预处理器转换源码。例如，借助 babel-loader 或 babelify 代码可以使用 ES2015/2016 语法。<br>如果你之前没有用过它们，我强烈推荐你阅读一些教程，了解模块打包器，然后使用最新的 ECMAScript 特性写 JavaScript。</p>
</blockquote>
<h6 id="vue-cli方案"><a href="#vue-cli方案" class="headerlink" title="vue-cli方案"></a>vue-cli方案</h6><p>官方给的脚手架工具vue-cli 安装方法:</p>
<p>intall<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g vue-cli</div></pre></td></tr></table></figure></p>
<p>Usage<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vue init &lt;template-name&gt; &lt;project-name&gt;</div></pre></td></tr></table></figure></p>
<p>Example:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vue init webpack my-project</div></pre></td></tr></table></figure></p>
<p>安装完毕后<br>在命令行执行 vue init webpack my-project<br><img src="/images/vue/33.png" alt=""></p>
<p>生成的目录结构<br><img src="/images/vue/44.png" alt=""></p>
<p>打开md文件,看任何一下项目一定要扫一眼md文件,这里有作者对项目的描述以及用法等.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># install dependencies</span></div><div class="line">npm install</div><div class="line"></div><div class="line"><span class="comment"># serve with hot reload at localhost:8080</span></div><div class="line">npm run dev</div><div class="line"></div><div class="line"><span class="comment"># build for production with minification</span></div><div class="line">npm run build</div><div class="line"></div><div class="line"><span class="comment"># run unit tests</span></div><div class="line">npm run unit</div><div class="line"></div><div class="line"><span class="comment"># run e2e tests</span></div><div class="line">npm run e2e</div><div class="line"></div><div class="line"><span class="comment"># run all tests</span></div><div class="line">npm <span class="built_in">test</span></div></pre></td></tr></table></figure></p>
<p>文件夹目录src里存放的源码.vue的源码.</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;要想用vue开发项目,会简单的语法还不够满足项目的需求,首先我们考虑的就是如果用vue快速投入的项目中,关注亮点&lt;br&gt;1、如何更好的支持组件开发&lt;br&gt;2、如何构建打包程序,例如我们用es6开发&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue 学习之路</title>
    <link href="http://greatboy.github.io/2016/04/16/vue/"/>
    <id>http://greatboy.github.io/2016/04/16/vue/</id>
    <published>2016-04-16T02:15:11.000Z</published>
    <updated>2016-09-07T04:37:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>MVVM、MVC各有优缺点吧，当时angular火爆的时候我就曾学习过，但是项目当中一直没敢试用，一是、团队成员对angular都不了解，需要重新学习，二、项目研发周期比较短 三、angular太重，因此放弃了angular。作为一名开发者，项目选型问题非常重要，不能说为了学习研究技术我就用新技术，不是说排斥新技术，个人也是一个新技术爱好者，只不过很多项目的选型要根据实际情况来，没有好与坏，只有适合不适合。当然、现在vue这么精干，还是值得一试，打算下一个项目用vue来写，好好学习一下。<br><a id="more"></a></p>
</blockquote>
<h3 id="一、hello-word"><a href="#一、hello-word" class="headerlink" title="一、hello word"></a>一、hello word</h3><p>废话不多说，来个代码研究一下，看了vue的文档，发现文档太友好了，不愧是国人开发的产品，文档就是不一样哈哈，点一个赞。</p>
<div class="tip">简单些了一下demo</div>

<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端观察<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"专注于网站前端设计与开发"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"True"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span>&gt;</span></div><div class="line">          Hello &#123;&#123;msg&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">new</span> Vue(&#123;</div><div class="line">                el:<span class="string">'#test-container'</span>,</div><div class="line">                data:&#123;</div><div class="line">                    msg:<span class="string">'Great Boy'</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>显示效果<a href="/demo/vue-demo/index1.html">点击查看</a></p>
<p>非常简洁，简直就是一个模板引擎在渲染的感觉，不过有一个问题就是由于是后加载的vue.js，因此渲染的时候会出现Hello ,原来是由于页面渲染的时候vue还没加载呢。所以我们把vue放到head里加载，就不会有这个问题了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端观察<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"专注于网站前端设计与开发"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"True"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span>&gt;</span></div><div class="line">          Hello &#123;&#123;msg&#125;&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">new</span> Vue(&#123;</div><div class="line">                el: <span class="string">'#test-container'</span>,</div><div class="line">                data: &#123;</div><div class="line">                    msg:<span class="string">'Great Boy'</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="/demo/vue-demo/index2.html">点击查看</a><br>hello word就这么简单了，所以说vue其实是基于viewModel的，也就是数据加业务的显示。</p>
<h3 id="二、双向绑定"><a href="#二、双向绑定" class="headerlink" title="二、双向绑定"></a>二、双向绑定</h3><p>这个可以说是angular的特性，vue也参考了angular等一些特性，这个非常有用，可以省去了很多dom操作，也是我非常敢兴趣的一个地方，还有非常感兴趣的一个地方就是组件，目前的项目我一直采取fis来构建，还是特别喜欢他的widget，也类似与组件的封装。可以把css html js封装成一个组件文件夹。非常好维护，这点fis做的很不错，推荐哈。先看来个demo代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端观察<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"专注于网站前端设计与开发"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"True"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span>&gt;</span></div><div class="line">			Hello &#123;&#123;msg&#125;&#125;</div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">new</span> Vue(&#123;</div><div class="line">                el:<span class="string">'#test-container'</span>,</div><div class="line">                data:&#123;</div><div class="line">                    msg:<span class="string">'Great Boy'</span></div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>语法很简单，欣赏中….<br><a href="/demo/vue-demo/index3.html">点击查看demo</a></p>
<h3 id="二、渲染列表"><a href="#二、渲染列表" class="headerlink" title="二、渲染列表"></a>二、渲染列表</h3><p>看了下api很简单，直接用v-for搞定，我相信开发过程序目前大脑一定很多想法，我脑中闪过，如何  分页、ajax怎么写？？？后续在学习吧<br>代码以及<a href="/demo/vue-demo/index4.html">查看demo</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>前端观察<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"专注于网站前端设计与开发"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"True"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span> <span class="attr">v-on:click</span>=<span class="string">"clickTest"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                Hello &#123;&#123;msg&#125;&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span></div><div class="line">                    &#123;&#123;item.name&#125;&#125;</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">            <span class="keyword">var</span> data =  &#123;</div><div class="line">                msg:<span class="string">'Great Boy'</span>,</div><div class="line">                list: [&#123;</div><div class="line">                    name:<span class="string">'张三'</span></div><div class="line">                &#125;,&#123;</div><div class="line">                    name:<span class="string">'李四'</span></div><div class="line">                &#125;,&#123;</div><div class="line">                    name:<span class="string">'王五'</span></div><div class="line">                &#125;]</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> test = <span class="keyword">new</span> Vue(&#123;</div><div class="line">                el:<span class="string">'#test-container'</span>,</div><div class="line">                data:data,</div><div class="line">                methods: &#123;</div><div class="line">                    clickTest: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                        <span class="built_in">console</span>.dir(e);</div><div class="line">                        data.push(data.list.push(&#123;<span class="string">'name'</span>:<span class="string">'周六'</span>&#125;));</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>看到这分页我就知道如何写拉,只需要把data里面的数据替换就好了,如果是下拉加载的话,可以直接拼接data数据,但是不知道会不会影响滚动条的位置,这个只有试试了.</p>
<p>其实我觉得vue给我感觉最好的一部分就是解放了dom操作,我们只需要操作数据,数据就会驱动dom,我相信大部分程序员都是自由主义这,我们可以把vue看成是vm,</p>
<p>也及时dom的渲染和事件的监听,这样自己的业务逻辑可以根据需求自行设置,我不提倡那种写好的框架,业务逻辑能否写好,框架是很难做到的,因为需求不同,需要不同的设计方式.</p>
<h3 id="三、指令与事件"><a href="#三、指令与事件" class="headerlink" title="三、指令与事件"></a>三、指令与事件</h3><p>指令就是特殊的带有前缀 v-的,例如v-if v-for v-on v-bind</p>
<h5 id="1-v-if-v-show"><a href="#1-v-if-v-show" class="headerlink" title="1 v-if v-show"></a>1 v-if v-show</h5><p>v-if 就是 if else的逻辑判断,例如,目前貌似没有看到支持elseif的指令,不知道是什么原因<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>v-if例子<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"if-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"hello"</span>&gt;</span>是<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>否<span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"test1 == 1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"test1 == 1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el:<span class="string">'#if-demo'</span>,</div><div class="line">        data:&#123;</div><div class="line">            hello: <span class="literal">true</span>,</div><div class="line">            test1:<span class="string">'1'</span>,</div><div class="line">            test2:<span class="string">'2'</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>还有一个指令v-show,跟v-if类似,但是v-show是通过display去控制,类似与jquery的show</p>
<h5 id="2-v-for"><a href="#2-v-for" class="headerlink" title="2 v-for"></a>2 v-for</h5><p>v-for 就是遍历指令<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"for-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>书名:&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>价格:&#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el:<span class="string">'#for-demo'</span>,</div><div class="line">        data:&#123;</div><div class="line">            list:[&#123;</div><div class="line">               title:<span class="string">'javascript设计模式'</span>,</div><div class="line">               price: <span class="number">12</span></div><div class="line">            &#125;,&#123;</div><div class="line">               title:<span class="string">'javascript高级开发'</span>,</div><div class="line">               price: <span class="number">20</span></div><div class="line">            &#125;,&#123;</div><div class="line">               title:<span class="string">'javascript算法与数据结构'</span>,</div><div class="line">               price: <span class="number">40</span></div><div class="line">            &#125;,&#123;</div><div class="line">               title:<span class="string">'javascript王者归来'</span>,</div><div class="line">               price: <span class="number">100</span></div><div class="line">            &#125;]</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h5 id="3-v-on-和-v-bind"><a href="#3-v-on-和-v-bind" class="headerlink" title="3 v-on 和 v-bind"></a>3 v-on 和 v-bind</h5><p>v-on 指令用于监听DOM事件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">v-bind 指令用于响应地更新 HTML 特性</div><div class="line">例如<span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> 最终生成 `<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>`</div><div class="line">例如<span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"url"</span>/&gt;</span> 最终生成 `<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://www.baidu.com"</span>/&gt;</span>`</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bind-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>v-bind href<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:test</span>=<span class="string">"url"</span>&gt;</span>v-bind test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click</span>=<span class="string">"clickTest"</span>&gt;</span>v-on绑定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el:<span class="string">'#bind-demo'</span>,</div><div class="line">        data:&#123;</div><div class="line">            url:<span class="string">'http://www.baidu.com'</span>,</div><div class="line">        &#125;,</div><div class="line">        methods:&#123;</div><div class="line">            clickTest: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                alert(<span class="string">'点击测试'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>v-bind还可以绑定多个,如我们常用的class,目前vue支持多种方式,</p>
<div class="tip">支持这种的<code>class=&quot;&quot;</code>写法和<code>v-bind:class</code>,但是官方文档说明,希望只支持一种写法,不要混用</div>

<blockquote>
<p>1)v-bind: class可以支持与普通class共存<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; 'class-a': isA, 'class-b': isB &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">data: &#123;</div><div class="line">  isA: true,</div><div class="line">  isB: false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>渲染为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static class-a"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当 isA 和 isB 变化时，会更新class的值,例如都未true时,渲染为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt;<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static class-a class-b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2)v-bind:class数组写法</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[classA, classB]"</span>&gt;</span></div><div class="line">data: &#123;</div><div class="line">  classA: 'class-a',</div><div class="line">  classB: 'class-b'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>渲染为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class-a class-b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>3)三元表达式写法</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[classA, isB ? classB : '']"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当isB为ture时,渲染为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"classA classB"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4) 1.0.19+支持对象写法</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>5) 内联写法</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">data: &#123;</div><div class="line">  activeColor: 'red',</div><div class="line">  fontSize: 30</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>渲染为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: red,fontSize:30px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</blockquote>
<p>自定义指令<br>除了内置的指令, vue允许自己定义指令,例如<code>Vue.directive(id, definition)</code>可以注册一个全局的指令,接收两个参数指令id和定义的对象.<br>定义的对象可以有几个钩子函数,</p>
<ul>
<li>bind：只调用一次，在指令第一次绑定到元素上时调用。</li>
<li>update： 在 bind 之后立即以初始值为参数第一次调用，之后每当绑定值变化时调用，参数为新值与旧值。</li>
<li>unbind：只调用一次，在指令从元素上解绑时调用。</li>
</ul>
<p>例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Vue.directive('my-directive', &#123;</div><div class="line">  bind: function () &#123;</div><div class="line">    // 准备工作</div><div class="line">    // 例如，添加事件处理器或只需要运行一次的高耗任务</div><div class="line">  &#125;,</div><div class="line">  update: function (newValue, oldValue) &#123;</div><div class="line">    // 值更新时的工作</div><div class="line">    // 也会以初始值为参数调用一次</div><div class="line">  &#125;,</div><div class="line">  unbind: function () &#123;</div><div class="line">    // 清理工作</div><div class="line">    // 例如，删除 bind() 添加的事件监听器</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>注册后就可以在模板中调用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-my-directive</span>=<span class="string">"someValue"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果只需要调用update函数,那么就只需要传一个函数就可以<br>例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Vue.directive('my-directive', function (value) &#123;</div><div class="line">  // 这个函数用作 update()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>同时,this对象暴露的属性如下</p>
<ul>
<li>el: 指令绑定的元素。</li>
<li>vm: 拥有该指令的上下文 ViewModel。</li>
<li>expression: 指令的表达式，不包括参数和过滤器。</li>
<li>arg: 指令的参数。</li>
<li>name: 指令的名字，不包含前缀。</li>
<li>modifiers: 一个对象，包含指令的修饰符。</li>
<li>descriptor: 一个对象，包含指令的解析结果。<div class="tip">你应当将这些属性视为只读的，不要修改它们。你也可以给指令对象添加自定义属性，但是注意不要覆盖已有的内部属性。</div>

</li>
</ul>
<p>官方例子<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">v-demo:hello.a.b</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">Vue.directive('demo', &#123;</div><div class="line">  bind: function () &#123;</div><div class="line">    console.log('demo bound!')</div><div class="line">  &#125;,</div><div class="line">  update: function (value) &#123;</div><div class="line">    this.el.innerHTML =</div><div class="line">      'name - '       + this.name + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>' +</div><div class="line">      'expression - ' + this.expression + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>' +</div><div class="line">      'argument - '   + this.arg + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>' +</div><div class="line">      'modifiers - '  + JSON.stringify(this.modifiers) + '<span class="tag">&lt;<span class="name">br</span>&gt;</span>' +</div><div class="line">      'value - '      + value</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">var demo = new Vue(&#123;</div><div class="line">  el: '#demo',</div><div class="line">  data: &#123;</div><div class="line">    msg: 'hello!'</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>指令传值,如果指令需要传多个值可以使用对象字面量传值,例如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令可以使用任意合法的 JavaScript 表达式：</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">"&#123; color: 'white', text: 'hello!' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">Vue.directive('demo', function (value) &#123;</div><div class="line">  console.log(value.color) // "white"</div><div class="line">  console.log(value.text) // "hello!"</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><a href="/demo/vue-demo/index5.html">点击查看demo</a></p>
<h3 id="四、监听数据变化"><a href="#四、监听数据变化" class="headerlink" title="四、监听数据变化"></a>四、监听数据变化</h3><p>1.$watch 和 computed 可以监听数据变动</p>
<p>例子:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: '#demo',</div><div class="line">  data: &#123;</div><div class="line">    firstName: 'Foo',</div><div class="line">    lastName: 'Bar',</div><div class="line">    fullName: 'Foo Bar'</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.$watch('firstName', function (val) &#123;</div><div class="line">  this.fullName = val + ' ' + this.lastName</div><div class="line">&#125;)</div><div class="line"></div><div class="line">vm.$watch('lastName', function (val) &#123;</div><div class="line">  this.fullName = this.firstName + ' ' + val</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>vue 给了更高的方案是 computed 计算<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: '#demo',</div><div class="line">  data: &#123;</div><div class="line">    firstName: 'Foo',</div><div class="line">    lastName: 'Bar'</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    fullName: function () &#123;</div><div class="line">      return this.firstName + ' ' + this.lastName</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<ol>
<li>setter和getter</li>
</ol>
<p>默认会去getter这个属性 ,当你设置属性是会调用setter</p>
<p>例如:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  fullName: &#123;</div><div class="line">    // getter</div><div class="line">    get: function () &#123;</div><div class="line">      return this.firstName + ' ' + this.lastName</div><div class="line">    &#125;,</div><div class="line">    // setter</div><div class="line">    set: function (newValue) &#123;</div><div class="line">      var names = newValue.split(' ')</div><div class="line">      this.firstName = names[0]</div><div class="line">      this.lastName = names[names.length - 1]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="/demo/vue-demo/index6.html">点击查看demo</a></p>
<h3 id="五、过滤器"><a href="#五、过滤器" class="headerlink" title="五、过滤器"></a>五、过滤器</h3><p>过滤器实际上就是数据在显示之前做的处理,目前后端用的比较多,也称为拦截器.<br>语法</p>
<p>message显示之前执行capitalize 过滤.<br><code></code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">串联过滤</div><div class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</div><div class="line">参数传递,这里字符串 &apos;arg1&apos; 将传给过滤器作为第二个参数，表达式 arg2 的值在计算出来之后作为第三个参数。</div><div class="line">&#123;&#123; message | filterA &apos;arg1&apos; arg2 &#125;&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>自定义过滤器</p>
</blockquote>
<p>类似于自定义指令，可以用全局方法 Vue.filter() 注册一个自定义过滤器，它接收两个参数：过滤器 ID 和过滤器函数。过滤器函数以值为参数，返回转换后的值：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!-- 'abc' =&gt; 'cba' --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"message | reverse"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">Vue.filter('reverse', function (value) &#123;</div><div class="line">  return value.split('').reverse().join('')</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>任意参数的过滤器</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Vue.filter('wrap', function (value, begin, end) &#123;</div><div class="line">  return begin + value + end</div><div class="line">&#125;)</div><div class="line"><span class="comment">&lt;!-- 'hello' =&gt; 'before hello after' --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"message | wrap 'before' 'after'"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<div class="tip">这里要说明一点,过滤器需要在创建vue对象之前声明,否则你new vue的时候,过滤器还没创建,肯定不会响应的.</div>

<p><a href="/demo/vue-demo/index7.html">点击查看demo</a></p>
<h3 id="六、表单控件绑定"><a href="#六、表单控件绑定" class="headerlink" title="六、表单控件绑定"></a>六、表单控件绑定</h3><p>1) Text<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Text-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>My Name Is &#123;&#123;myname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"myname"</span> <span class="attr">placeholder</span>=<span class="string">"Edit My Name"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el:<span class="string">'#Text-demo'</span>,</div><div class="line">        data:&#123;</div><div class="line">            msg:<span class="string">'Great Boy'</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2) Textarea</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Textarea-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>My Name Is &#123;&#123;myname&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"myname"</span> <span class="attr">placeholder</span>=<span class="string">"Edit My Name"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el:<span class="string">'#Textarea-demo'</span>,</div><div class="line">        data:&#123;</div><div class="line">            msg:<span class="string">'Great Boy'</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>3) Checkbox</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Checkbox-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox-2"</span> <span class="attr">v-model</span>=<span class="string">"checked2"</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox-2"</span>&gt;</span>&#123;&#123; checked2 &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el:<span class="string">'#Checkbox-demo'</span>,</div><div class="line">        data:&#123;</div><div class="line">            checked: <span class="literal">true</span>,</div><div class="line">            checked2: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4) Radio</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Radio<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Radio-demo"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">new</span> Vue(&#123;</div><div class="line">        el:<span class="string">'#Radio-demo'</span>,</div><div class="line">        data:&#123;</div><div class="line">            picked: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="/demo/vue-demo/index8.html">点击查看demo</a></p>
<h3 id="七、动画过渡"><a href="#七、动画过渡" class="headerlink" title="七、动画过渡"></a>七、动画过渡</h3><blockquote>
<p>官方定义-&gt; 通过 Vue.js 的过渡系统，可以在元素从 DOM 中插入或移除时自动应用过渡效果。Vue.js 会在适当的时机为你触发 CSS 过渡或动画，你也可以提供相应的 JavaScript 钩子函数在过渡过程中执行自定义的 DOM 操作。</p>
</blockquote>
<p>过渡就是在给数据做变化的时候,是dom有一定的衔接动画</p>
<p>示例</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>前端观察<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"专注于网站前端设计与开发"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"True"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">            /* 必需 */</div><div class="line">            .expand-transition &#123;</div><div class="line">                transition: all .3s ease;</div><div class="line">                height: 30px;</div><div class="line">                padding: 10px;</div><div class="line">                background-color: #eee;</div><div class="line">                overflow: hidden;</div><div class="line">            &#125;</div><div class="line">            .expand-enter, .expand-leave &#123;</div><div class="line">              height: 0;</div><div class="line">              padding: 0 10px;</div><div class="line">              opacity: 0;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"show"</span> <span class="attr">transition</span>=<span class="string">"expand"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show = !show"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">new</span> Vue(&#123;</div><div class="line">				el:<span class="string">'#test-container'</span>,</div><div class="line">				data:&#123;</div><div class="line">					show:<span class="literal">true</span>,</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="/demo/vue-demo/index9.html">点击查看demo</a></p>
<h3 id="八、组件"><a href="#八、组件" class="headerlink" title="八、组件"></a>八、组件</h3><p>组件可以说是我除了绑定渲染比较关注的一定地方,因为我一直认为开发就应该以组件的模式开发,这样维护起来比较方便,当需要改程序的时候,改一个地方就只改一个地方就好.<br>这也是我比较推崇组件开发的原因之一, fis目前已经很好的可以支持组件模式开发的构建,例如fis的 widget,当开发的时候可以把一个页面切分成N个widget,每一个widget可以由 html,css,js构成,当然这些不是必须的.</p>
<p><img src="/images/vue/22.png" alt=""></p>
<blockquote>
<p>接下来看看vue的组件<br>官方定义-&gt;组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p>
</blockquote>
<p>构造方式用<code>Vue.extend()</code>,并且需要<code>Vue.component</code>注册</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">&#125;);</div><div class="line">Vue.component(<span class="string">'my-component'</span>, MyComponent)</div></pre></td></tr></table></figure>
<p>组件构造之后就可以通过<my-component></my-component>形式使用,需要确保初始化之前注册了组件</p>
<div class="tip">Vue提示-对于自定义标签名字，Vue.js 不强制要求遵循 W3C 规则（小写，并且包含一个短杠），尽管遵循这个规则比较好。</div>


<p>示例:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>前端观察<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"专注于网站前端设计与开发"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"HandheldFriendly"</span> <span class="attr">content</span>=<span class="string">"True"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"MobileOptimized"</span> <span class="attr">content</span>=<span class="string">"320"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">new</span> Vue(&#123;</div><div class="line">				el:<span class="string">'#test-container'</span>,</div><div class="line">				data:&#123;</div><div class="line">					msg:<span class="string">'Great Boy'</span></div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">            <span class="comment">// 定义</span></div><div class="line">            <span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">                template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">            &#125;)</div><div class="line">            <span class="comment">// 注册</span></div><div class="line">            Vue.component(<span class="string">'my-component'</span>, MyComponent)</div><div class="line">            <span class="comment">// 创建根实例</span></div><div class="line">            <span class="keyword">new</span> Vue(&#123;</div><div class="line">                el: <span class="string">'#test-container'</span></div><div class="line">            &#125;)</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>渲染为</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test-container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>A custom component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>看到这里,我有几个问题<br>1,如何传给组件传递数据?<br>2,如何给组件打包成一个文件,或者一个文件夹?<br>3,能不能不用template,直接吧模板写在html里呢,毕竟用字符串拼接html是很累而且不友好的工作<br>带着这两个问题继续看文档</p>
</blockquote>
<p>局部注册,可以在某一个组件内部注册一个组件,语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Child = Vue.extend(&#123; <span class="comment">/* ... */</span> &#125;)</div><div class="line"><span class="keyword">var</span> Parent = Vue.extend(&#123;</div><div class="line">  template: <span class="string">'...'</span>,</div><div class="line">  components: &#123;</div><div class="line">    <span class="comment">// &lt;my-component&gt; 只能用在父组件模板内</span></div><div class="line">    <span class="string">'my-component'</span>: Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>还可以</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在一个步骤中扩展与注册</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</div><div class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 局部注册也可以这么做</span></div><div class="line"><span class="keyword">var</span> Parent = Vue.extend(&#123;</div><div class="line">  components: &#123;</div><div class="line">    <span class="string">'my-component'</span>: &#123;</div><div class="line">      template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可以通过以下方式传递数据,MyComponent 所有的实例将共享同一个 data 对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; a: <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  data: data</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>还可以让函数返回数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</div><div class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123; a: <span class="number">1</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>模板解析</p>
<blockquote>
<p>引用官网 -&gt;Vue 的模板是 DOM 模板，使用浏览器原生的解析器而不是自己实现一个。相比字符串模板，DOM 模板有一些好处，但是也有问题，它必须是有效的 HTML 片段。一些 HTML 元素对什么元素可以放在它里面有限制。常见的限制：<br>a 不能包含其它的交互元素（如按钮，链接）<br>ul 和 ol 只能直接包含 li<br>select 只能包含 option 和 optgroup<br>table 只能直接包含 thead, tbody, tfoot, tr, caption, col, colgroup<br>tr 只能直接包含 th 和 td<br>在实际中，这些限制会导致意外的结果。尽管在简单的情况下它可能可以工作，但是你不能依赖自定义组件在浏览器验证之前的展开结果。例如 <my-select><option>…</option></my-select> 不是有效的模板，即使 my-select 组件最终展开为 <select>…</select>。<br>另一个结果是，自定义标签（包括自定义元素和特殊标签，如 <component>、<template>、 <partial> ）不能用在 ul, select, table 等对内部元素有限制的标签内。放在这些元素内部的自定义标签将被提到元素的外面，因而渲染不正确。</partial></template></component></p>
</blockquote>
<p>有这么多限制….</p>
<p>数据传递<br>刚才的数据传递问题可以通过 props来传递</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">  <span class="comment">// 声明 props</span></div><div class="line">  props: [<span class="string">'msg'</span>],</div><div class="line">  <span class="comment">// prop 可以用在模板内</span></div><div class="line">  <span class="comment">// 可以用 this.msg 设置</span></div><div class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">msg</span>=<span class="string">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个其实是我想要的,因为从组件一般都有引用之处,也及时在这是才开始传递数据的</p>
<p>父子组件通信</p>
<p>子组件可以用 this.$parent 访问它的父组件。根实例的后代可以用 this.$root 访问它。父组件有一个数组 this.$children，包含它所有的子元素。<br>尽管可以访问父链上任意的实例，不过子组件应当避免直接依赖父组件的数据，尽量显式地使用 props 传递数据。另外，在子组件中修改父组件的状态是非常糟糕的做法，因为：<br>这让父组件与子组件紧密地耦合；<br>只看父组件，很难理解父组件的状态。因为它可能被任意子组件修改！理想情况下，只有组件自己能修改它的状态。</p>
<p>编写可复用组件</p>
<p>在编写组件时，记住是否要复用组件有好处。一次性组件跟其它组件紧密耦合没关系，但是可复用组件应当定义一个清晰的公开接口。</p>
<p>Vue.js 组件 API 来自三部分——prop，事件和 slot：</p>
<ul>
<li>prop 允许外部环境传递数据给组件；</li>
<li>事件 允许组件触发外部环境的 action；</li>
<li>slot 允许外部环境插入内容到组件的视图结构内。</li>
</ul>
<p>上面组件的API非常重要,这也是我们写组件的第二个好处,第一个是拆分好了,好维护,第二个是可以复用.</p>
<p>至此组件大部分的知识都已经学完, 面向组件开发也是我们开发中最重要的一种方式.<br>但是上面提的3个问题,还有一个问题2没有解决,其实我大概看的了一下构建模式里,可以把这个组件写成.vue后,可以通过打包工具去合并.那么如果拆分呢?回头看到构建在说.<br>用组件写个小的demo吧,温习一下,组件的内容较多,需要仔细研究.<br><a href="/demo/vue-demo/index10.html">点击查看demo</a></p>
<h3 id="九、插件"><a href="#九、插件" class="headerlink" title="九、插件"></a>九、插件</h3><p>组件其实是我最感性的内容之一,好的模块拆分就看它了,不过插件也很重要,插件主要是来写一些复用性强的工具,例如ajax,router,chart等等<br>开发的种类:</p>
<ul>
<li>添加全局方法或属性，如 <a href="https://github.com/vuejs/vue-element" target="_blank" rel="external">vue-element</a></li>
<li>添加全局资源：指令/过滤器/过渡等，如 <a href="https://github.com/vuejs/vue-touch" target="_blank" rel="external">vue-touch</a></li>
<li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li>
<li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="external">vue-router</a></li>
</ul>
<p>插件开发方法:<br>1.插件需要对外接口install<br>2.用use方法注册,就可以使用了</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MVVM、MVC各有优缺点吧，当时angular火爆的时候我就曾学习过，但是项目当中一直没敢试用，一是、团队成员对angular都不了解，需要重新学习，二、项目研发周期比较短 三、angular太重，因此放弃了angular。作为一名开发者，项目选型问题非常重要，不能说为了学习研究技术我就用新技术，不是说排斥新技术，个人也是一个新技术爱好者，只不过很多项目的选型要根据实际情况来，没有好与坏，只有适合不适合。当然、现在vue这么精干，还是值得一试，打算下一个项目用vue来写，好好学习一下。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>移动端h5适配</title>
    <link href="http://greatboy.github.io/2015/01/13/hello-world/"/>
    <id>http://greatboy.github.io/2015/01/13/hello-world/</id>
    <published>2015-01-13T07:04:33.000Z</published>
    <updated>2016-09-07T01:48:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>未来肯定是移动端的天下，接下来谈谈h5移动端的布局问题，目前有三种<br>1、百分比布局 —–&gt;有点兼容性好，缺点布局的时候需要计算比较麻烦，不过可以采取工具或脚本实现。<br>2、flex布局  —–&gt;目前看来兼容还是有一定问题，尤其是低版本andriod<br>3、rem布局   —–&gt;目前比较推崇的布局方案，感兴趣的可以看看<a href="http://www.cocoachina.com/webapp/20150617/12190.html" target="_blank" rel="external">淘宝的flexible</a></p>
</blockquote>
<a id="more"></a>
<h3 id="我的布局方案"><a href="#我的布局方案" class="headerlink" title="我的布局方案"></a>我的布局方案</h3><h4 id="一、定宽布局"><a href="#一、定宽布局" class="headerlink" title="一、定宽布局"></a>一、定宽布局</h4><p><em>我先解释一下原理，由于以前的机器是320**XXX的分辨率，所以我采取的320布局，图片当然要做2倍图或者3倍图，就是说320px是我们的布局基础。例如iphone5是640</em>1136px，但是我们用js获取的实际宽度是320*568，也就是说屏幕相当于一个点，由两个像素，如果这个点由显示的像素越多，屏幕就约清晰。</p>
<p>例如一个新的设计图是640<em>1136的iphone5，其实机子的实际宽度是320</em>568。我们可以按照320宽度进行布局，也就是说所有的图片我们需要用宽度或者背景宽度来控制。这样即可以采用ihpone 5可以采用，2倍图标，iphone6 3倍图标。</p>
<p>这样我们其实是把宽度写死了，也就是说在机子上的宽度显示的永远是320px的。这里我们就要想法进行缩放去适配各种不同机子，也就是rem方式。rem其实是相对于根节点的font-size大小进行缩放，也就是默认情况下1rem=16px。那么我们的320px=20rem，也就是布局的时候我们写20rem。这时候我们需要把html的font-size计算成需要的大小，就可以适配机器了。</p>
<p>代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">id</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>GreatBoy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">            /*-----css Reset end-----*/</div><div class="line">            body,h1,h2,h3,h4,h5,h6,p,ul,ol,form&#123;</div><div class="line">                margin:0;</div><div class="line">                padding:0px;</div><div class="line">            &#125;</div><div class="line">            html&#123;</div><div class="line">                display: none;</div><div class="line">            &#125;</div><div class="line">            .nav img&#123;</div><div class="line">                width:10rem;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://p1.jmstatic.com/banner/75/mobile_app/24326_0.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span>用户信息<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userinfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">        (function(win) &#123;</div><div class="line">            var doc = win.document,</div><div class="line">                scale = 16,</div><div class="line">                $body = doc.getElementsByTagName('body')[0],</div><div class="line">                $html = doc.getElementsByTagName('html')[0],</div><div class="line">                windowWidth = doc.documentElement &amp;&amp; doc.documentElement.clientWidth || doc.body.clientWidth || win.innerWidth,</div><div class="line">                windowHeight = document.documentElement &amp;&amp; document.documentElement.clientHeight || documentElement.body.clientHeight || window.innerHeight,</div><div class="line">                deviceAgent = navigator.userAgent.toLowerCase();</div><div class="line">            if ( deviceAgent.match( /(iphone|ipod|ipad|android|windows\s*phone|symbianos)/ ) ) &#123;</div><div class="line">                try&#123;</div><div class="line">                    if ( window.localStorage &amp;&amp; window.localStorage.getItem('scale_greatboy') ) &#123;</div><div class="line">                        scale = window.localStorage.getItem('scale_greatboy');</div><div class="line">                    &#125; else &#123;</div><div class="line">                        scale = parseFloat(windowWidth * 16 / 320);</div><div class="line">                        if (windowHeight &gt; windowWidth) &#123;</div><div class="line">                            window.localStorage &amp;&amp; window.localStorage.setItem('scale_greatboy', scale);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;catch(e)&#123;&#125;</div><div class="line">                if (deviceAgent.match(/android\s*2.3/) &amp;&amp; deviceAgent.match(/micromessenger/)) &#123;</div><div class="line">                    scale = 16;</div><div class="line">                &#125;</div><div class="line">                $html.style.fontSize = scale + 'px';</div><div class="line">                $html.style.display = 'block';</div><div class="line">            &#125; else &#123;</div><div class="line">                window.onresize = function()&#123;</div><div class="line">                    windowWidth = doc.documentElement &amp;&amp; doc.documentElement.clientWidth || doc.body.clientWidth || win.innerWidth;</div><div class="line">                    scale = parseFloat(windowWidth * 16 / 320);</div><div class="line">                    $html.style.fontSize = scale + 'px';</div><div class="line">                &#125;;</div><div class="line">                scale = parseFloat(windowWidth * 16 / 320);</div><div class="line">                $html.style.fontSize = scale + 'px';</div><div class="line">                $html.style.display = 'block';</div><div class="line">            &#125;</div><div class="line">            $body.style.width = '20rem';</div><div class="line">        &#125;)(window);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这种布局目前已经可以适配大部分手机，除非是不支持rem的手机，但是还会有问题，就是16px = 1rem，这样每次我们布局的时候量的宽度都是px的，还的转换成rem，这里其实可以采取很多方案，例如发布的时候编译，以及用css的一些插件来实现。当时我们采取的是发布的时候用node来写了一个插件做这个事情。fis的插件如</p>
<h4 id="二、定宽布局的改良"><a href="#二、定宽布局的改良" class="headerlink" title="二、定宽布局的改良"></a>二、定宽布局的改良</h4><p>说起改良后的方法还的感谢猫眼的前端技术经理，有一次面试跟猫眼的前端技术经理聊rem布局的时候聊出来的，他给的建议是如果写成320=20rem，这种方式不好计算，那么不如直接写320px = 3.2rem，回头一想其实也是可以的，我们只需要在根节点的font-size做处理就好。   320=20rem其实是1rem=16px,那么如果是320px = 3.2rem，那么其实相当于1rem = 100px，也就是说需要把1rem=16px转换成1rem=100px而已。于似乎出现下面的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">id</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>GreatBoy<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">            /*-----css Reset end-----*/</div><div class="line">            body,h1,h2,h3,h4,h5,h6,p,ul,ol,form&#123;</div><div class="line">                margin:0;</div><div class="line">                padding:0px;</div><div class="line">            &#125;</div><div class="line">            body&#123;</div><div class="line">                font-size: 14px;</div><div class="line">            &#125;</div><div class="line">            .nav img&#123;</div><div class="line">                width: 100%;</div><div class="line">            &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://p1.jmstatic.com/banner/75/mobile_app/24326_0.jpg"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"user"</span>&gt;</span>用户信息<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"userinfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">            (function(win) &#123;</div><div class="line">                var doc = win.document,</div><div class="line">                scale = 16,</div><div class="line">                $body = doc.getElementsByTagName('body')[0],</div><div class="line">                $html = doc.getElementsByTagName('html')[0],</div><div class="line">                windowWidth = doc.documentElement &amp;&amp; doc.documentElement.clientWidth || doc.body &amp;&amp; doc.body.clientWidth || win.innerWidth,</div><div class="line">                windowHeight = doc.documentElement &amp;&amp; doc.documentElement.clientHeight || doc.body &amp;&amp; doc.body.clientHeight || window.innerHeight,</div><div class="line">                deviceAgent = navigator.userAgent.toLowerCase();</div><div class="line">	            if ( deviceAgent.match( /(iphone|ipod|ipad|android|windows\s*phone|symbianos)/ ) ) &#123;</div><div class="line">	                scale = parseFloat(windowWidth * 16 / (16*3.2));</div><div class="line">	                if (deviceAgent.match(/android\s*2.3/) &amp;&amp; deviceAgent.match(/micromessenger/)) &#123;</div><div class="line">	                    scale = 16;</div><div class="line">	                &#125;</div><div class="line">	                $html.style.fontSize = scale + 'px';</div><div class="line">	                $html.style.display = 'block';</div><div class="line">	            &#125; else &#123;</div><div class="line">	                window.onresize = function()&#123;</div><div class="line">	                    windowWidth = doc.documentElement &amp;&amp; doc.documentElement.clientWidth || doc.body.clientWidth || win.innerWidth;</div><div class="line">	                    scale = parseFloat(windowWidth * 16 / (16*3.2));</div><div class="line">	                    $html.style.fontSize = scale + 'px';</div><div class="line">	                &#125;;</div><div class="line">	                scale = parseFloat(windowWidth * 16 / (16*3.2));</div><div class="line">	                if(scale &gt; 150)&#123;</div><div class="line">	                    scale = 150;</div><div class="line">	                &#125;</div><div class="line">	                $html.style.fontSize = scale + 'px';</div><div class="line">	                $html.style.display = 'block';</div><div class="line">	            &#125;</div><div class="line">	            $body.style.width = '3.2rem';</div><div class="line">	            $body.style.margin = '0px auto';</div><div class="line">	        &#125;)(window);</div><div class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了移动端布局，我也尝试了很多方法，目前这种方法比较好，可以适配大多数手机，但是缺点就是ipad上显示比较悲剧，因为是完全缩放的，所以我目前写死了缩放系数。也就是在pc上的缩放系数定死了。<a href="https://github.com/GreatBoy/h5-rem" target="_blank" rel="external">github</a></p>
<div class="tip"><br>把我上面的代码放到你的页面，然后你可以进行布局了，以320为基础，也就是设计图需要改到320大小进行量尺寸，320px写成3.2rem，100px写成1rem，10px写成0.1rem，需要注意的是图片需要控制，并且图片需要320的二倍图或者三倍图。<br></div>


]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;未来肯定是移动端的天下，接下来谈谈h5移动端的布局问题，目前有三种&lt;br&gt;1、百分比布局 —–&amp;gt;有点兼容性好，缺点布局的时候需要计算比较麻烦，不过可以采取工具或脚本实现。&lt;br&gt;2、flex布局  —–&amp;gt;目前看来兼容还是有一定问题，尤其是低版本andriod&lt;br&gt;3、rem布局   —–&amp;gt;目前比较推崇的布局方案，感兴趣的可以看看&lt;a href=&quot;http://www.cocoachina.com/webapp/20150617/12190.html&quot;&gt;淘宝的flexible&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
